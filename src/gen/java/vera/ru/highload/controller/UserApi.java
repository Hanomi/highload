/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package vera.ru.highload.controller;

import vera.ru.highload.model.LoginPost500ResponseDTO;
import vera.ru.highload.model.UserDTO;
import vera.ru.highload.model.UserRegisterPost200ResponseDTO;
import vera.ru.highload.model.UserRegisterPostRequestDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-02T15:14:17.871550300+03:00[Europe/Moscow]")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    /**
     * GET /user/get/{id}
     * Получение анкеты пользователя
     *
     * @param id Идентификатор пользователя (required)
     * @return Успешное получение анкеты пользователя (status code 200)
     *         or Невалидные данные (status code 400)
     *         or Анкета не найдена (status code 404)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "userGetIdGet",
        description = "Получение анкеты пользователя",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное получение анкеты пользователя", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные"),
            @ApiResponse(responseCode = "404", description = "Анкета не найдена"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/get/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserDTO>> userGetIdGet(
        @Parameter(name = "id", description = "Идентификатор пользователя", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"birthdate\" : \"2017-02-01T00:00:00.000+00:00\", \"city\" : \"Москва\", \"second_name\" : \"Фамилия\", \"id\" : \"id\", \"biography\" : \"Хобби, интересы и т.п.\", \"first_name\" : \"Имя\", \"age\" : 18 }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /user/register
     * Регистрация нового пользователя
     *
     * @param userRegisterPostRequestDTO  (optional)
     * @return Успешная регистрация (status code 200)
     *         or Невалидные данные (status code 400)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "userRegisterPost",
        description = "Регистрация нового пользователя",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешная регистрация", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegisterPost200ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserRegisterPost200ResponseDTO>> userRegisterPost(
        @Parameter(name = "UserRegisterPostRequestDTO", description = "") @Valid @RequestBody(required = false) Mono<UserRegisterPostRequestDTO> userRegisterPostRequestDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"user_id\" : \"e4d2e6b0-cde2-42c5-aac3-0b8316f21e58\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(userRegisterPostRequestDTO).then(Mono.empty());

    }


    /**
     * GET /user/search
     * Поиск анкет
     *
     * @param firstName Условие поиска по имени (required)
     * @param lastName Условие поиска по фамилии (required)
     * @return Успешные поиск пользователя (status code 200)
     *         or Невалидные данные (status code 400)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "userSearchGet",
        description = "Поиск анкет",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешные поиск пользователя", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/search",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<UserDTO>>> userSearchGet(
        @NotNull @Parameter(name = "first_name", description = "Условие поиска по имени", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "first_name", required = true) String firstName,
        @NotNull @Parameter(name = "last_name", description = "Условие поиска по фамилии", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "last_name", required = true) String lastName,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ { \"birthdate\" : \"2017-02-01T00:00:00.000+00:00\", \"city\" : \"Москва\", \"second_name\" : \"Фамилия\", \"id\" : \"id\", \"biography\" : \"Хобби, интересы и т.п.\", \"first_name\" : \"Имя\", \"age\" : 18 }, { \"birthdate\" : \"2017-02-01T00:00:00.000+00:00\", \"city\" : \"Москва\", \"second_name\" : \"Фамилия\", \"id\" : \"id\", \"biography\" : \"Хобби, интересы и т.п.\", \"first_name\" : \"Имя\", \"age\" : 18 } ]";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
