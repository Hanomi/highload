/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package vera.ru.highload.controller;

import vera.ru.highload.model.DialogMessageDTO;
import vera.ru.highload.model.DialogUserIdSendPostRequestDTO;
import vera.ru.highload.model.LoginPost500ResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-17T16:50:31.741335400+03:00[Europe/Moscow]")
@Validated
@Tag(name = "dialog", description = "the dialog API")
public interface DialogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /dialog/{user_id}/list
     *
     * @param userId  (required)
     * @return Диалог между двумя пользователями (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "dialogUserIdListGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Диалог между двумя пользователями", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DialogMessageDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dialog/{user_id}/list",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DialogMessageDTO>> dialogUserIdListGet(
        @Parameter(name = "user_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"from\" : \"from\", \"to\" : \"to\", \"text\" : \"Привет, как дела?\" }, { \"from\" : \"from\", \"to\" : \"to\", \"text\" : \"Привет, как дела?\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dialog/{user_id}/send
     *
     * @param userId  (required)
     * @param dialogUserIdSendPostRequestDTO  (optional)
     * @return Успешно отправлено сообщение (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "dialogUserIdSendPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно отправлено сообщение"),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500ResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dialog/{user_id}/send",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> dialogUserIdSendPost(
        @Parameter(name = "user_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "DialogUserIdSendPostRequestDTO", description = "") @Valid @RequestBody(required = false) DialogUserIdSendPostRequestDTO dialogUserIdSendPostRequestDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
